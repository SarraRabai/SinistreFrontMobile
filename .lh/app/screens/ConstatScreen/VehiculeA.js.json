{
    "sourceFile": "app/screens/ConstatScreen/VehiculeA.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749048511382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749048511382,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Image,\r\n  Button,\r\n  SafeAreaView,\r\n} from \"react-native\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport { Checkbox } from \"react-native-paper\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport VoiceRecording from \"./VoiceRecording\";\r\nimport DatePickerField from \"./DatePickerField\";\r\nimport CustomPicker from \"./Picker\";\r\nimport DateRangePickerField from \"./DateRangePickerField\";\r\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport UploadScreen from \"../UploadScreen\";\r\nimport constatApi from \"../../api/constatApi\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { use } from \"react\";\r\nimport useAuth from \"../../auth/useAuth\";\r\nimport { AppFormField } from \"../../components/forms\";\r\nimport AppTextInput from \"../../components/AppTextInput\";\r\n//const { uploadImage, uploadVoice } = constatApi;\r\n\r\n// Schéma de validation avec Yup\r\nconst validationSchema = Yup.object().shape({\r\n  // ... (le reste du schéma de validation)\r\n});\r\n\r\nconst vehicleFaces = [\r\n  \"avant\",\r\n  \"arrière\",\r\n  \"gauche\",\r\n  \"droite\",\r\n  \"avant-arrière\",\r\n  \"avant-gauche\",\r\n  \"avant-droite\",\r\n  \"arrière-gauche\",\r\n  \"arrière-droite\",\r\n  \"gauche-droite\",\r\n  \"avant-arrière-gauche\",\r\n  \"avant-arrière-droite\",\r\n  \"tous\",\r\n];\r\nconst VehiculeA = () => {\r\n  const { user } = useAuth();\r\n\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n  const { generalData, accidentId } = route.params;\r\n\r\n  const [step, SetStep] = useState(1);\r\n\r\n  // États pour les images des 4 côtés\r\n  const [frontImage, setFrontImage] = useState(null);\r\n  const [backImage, setBackImage] = useState(null);\r\n  const [leftImage, setLeftImage] = useState(null);\r\n  const [rightImage, setRightImage] = useState(null);\r\n\r\n  // États pour les circonstances\r\n  const [circumstances, setCircumstances] = useState({\r\n    stationnement: false,\r\n    quittaitStationnement: false,\r\n    prenaitStationnement: false,\r\n    sortaitParking: false,\r\n    engageaitParking: false,\r\n    arretCirculation: false,\r\n    frottementSansChangementFile: false,\r\n    heurtaitArriere: false,\r\n    roulaitMemeSensFileDifferente: false,\r\n    changeaitFile: false,\r\n    doublait: false,\r\n    viraitDroite: false,\r\n    viraitGauche: false,\r\n    reculait: false,\r\n    empiétaitChausseeInverse: false,\r\n    venaitDroiteCarrefour: false,\r\n    nonRespectSignalPriorite: false,\r\n  });\r\n\r\n  // États pour les enregistrements vocaux\r\n  const [voiceRecordings, setVoiceRecordings] = useState([]);\r\n\r\n  // États pour les parties du numéro d'immatriculation\r\n  const [firstPart, setFirstPart] = useState(\"\");\r\n  const [secondPart, setSecondPart] = useState(\"\");\r\n  const [selectedFace, setSelectedFace] = useState(\"\");\r\n  // États pour la progression de l'upload\r\n  const [uploadVisible, setUploadVisible] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  // Ouvrir la caméra pour capturer une image\r\n  const openCamera = (side) => {\r\n    navigation.navigate(\"CameraScreen\", {\r\n      onImageCapture: (imageUri) => handleImageCapture(imageUri, side),\r\n    });\r\n  };\r\n\r\n  // Gérer l'image capturée\r\n  const handleImageCapture = (imageUri, side) => {\r\n    if (imageUri) {\r\n      switch (side) {\r\n        case \"front\":\r\n          setFrontImage(imageUri);\r\n          break;\r\n        case \"back\":\r\n          setBackImage(imageUri);\r\n          break;\r\n        case \"left\":\r\n          setLeftImage(imageUri);\r\n          break;\r\n        case \"right\":\r\n          setRightImage(imageUri);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Supprimer l'image capturée\r\n  const removeImage = (side) => {\r\n    switch (side) {\r\n      case \"front\":\r\n        setFrontImage(null);\r\n        break;\r\n      case \"back\":\r\n        setBackImage(null);\r\n        break;\r\n      case \"left\":\r\n        setLeftImage(null);\r\n        break;\r\n      case \"right\":\r\n        setRightImage(null);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Rendre un bouton de caméra avec l'image ou l'icône\r\n  const renderCameraButton = (side, image) => {\r\n    return (\r\n      <TouchableOpacity\r\n        style={styles.cameraButton}\r\n        onPress={() => openCamera(side)}\r\n      >\r\n        {image ? (\r\n          <View style={styles.imageContainer}>\r\n            <Image source={{ uri: image }} style={styles.image} />\r\n            <TouchableOpacity\r\n              style={styles.removeIcon}\r\n              onPress={() => removeImage(side)}\r\n            >\r\n              <MaterialIcons name=\"close\" size={24} color=\"red\" />\r\n            </TouchableOpacity>\r\n          </View>\r\n        ) : (\r\n          <>\r\n            <MaterialIcons name=\"directions-car\" size={32} color=\"#007BFF\" />\r\n            <Text style={styles.cameraButtonText}>\r\n              {side === \"front\"\r\n                ? \"Avant\"\r\n                : side === \"back\"\r\n                ? \"Arrière\"\r\n                : side === \"left\"\r\n                ? \"Gauche\"\r\n                : \"Droite\"}\r\n            </Text>\r\n          </>\r\n        )}\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  // Gérer le changement des cases à cocher\r\n  const handleCheckboxChange = (key) => {\r\n    setCircumstances((prev) => ({\r\n      ...prev,\r\n      [key]: !prev[key],\r\n    }));\r\n  };\r\n\r\n  // Compter le nombre de cases cochées\r\n  const countCheckedBoxes = () => {\r\n    return Object.values(circumstances).filter((value) => value).length;\r\n  };\r\n\r\n  // Soumettre le formulaire\r\n  const handleFormSubmit = async (values) => {\r\n    setProgress(0);\r\n    setUploadVisible(true);\r\n\r\n    try {\r\n      // Récupération multi-source de l'ID\r\n      const finalAccidentId =\r\n        route.params.accidentId ||\r\n        (await AsyncStorage.getItem(\"currentAccidentId\"));\r\n\r\n      if (!finalAccidentId) {\r\n        throw new Error(\"ID d'accident introuvable\");\r\n      }\r\n\r\n      // Préparer les données du formulaire\r\n      const vehicleAData = {\r\n        frontImage,\r\n        backImage,\r\n        leftImage,\r\n        rightImage,\r\n        voiceRecordings,\r\n        ...values,\r\n        circumstances,\r\n        numberOfCheckedBoxes: countCheckedBoxes(),\r\n        accidentId: finalAccidentId,\r\n        //voiceRecordings,\r\n      };\r\n      //console.log(\"Soumission avec accidentId:\", vehicleAData.accidentId);\r\n\r\n      // Combiner les données\r\n      const combinedData = {\r\n        ...generalData,\r\n        ...vehicleAData,\r\n      };\r\n\r\n      // console.log(\"Données combinées :\", combinedData);\r\n\r\n      // Envoyer les données au backend\r\n      const result = await constatApi.addConstat(combinedData, (progress) =>\r\n        setProgress(progress)\r\n      );\r\n      setUploadVisible(false);\r\n     \r\n\r\n      if (!result.ok) {\r\n        alert(result.problem, result.data);\r\n        return;\r\n      }\r\n\r\n      alert(\"Constat saved successfully!\");\r\n      await AsyncStorage.removeItem(\"currentAccidentId\"); // Nettoyage\r\n      navigation.navigate(\"MesConstats\");\r\n    } catch (error) {\r\n      console.log(\"err\", error);\r\n      setUploadVisible(false);\r\n      alert(\"An error occurred while saving the constat.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <UploadScreen\r\n        onDone={() => setUploadVisible(false)}\r\n        progress={progress}\r\n        visible={uploadVisible}\r\n      />\r\n      <ScrollView contentContainerStyle={styles.scrollViewContent}>\r\n        <Formik\r\n          initialValues={{\r\n            insuredVehicle: \"\",\r\n            contractNumber: \"\",\r\n            agency: \"\",\r\n            validFrom: \"\",\r\n            validTo: \"\",\r\n            driverLastName: \"\",\r\n            driverFirstName: \"\",\r\n            driverAddress: \"\",\r\n            driverLicenseNumber: \"\",\r\n            licenseIssueDate: \"\",\r\n            insuredLastName: user?.name,\r\n            insuredFirstName: user?.prenom,\r\n            insuredAddress: user?.adresse,\r\n            insuredPhone: user?.numeroTelephone,\r\n            vehicleBrand: \"\",\r\n            vehicleType: \"\",\r\n            face: \"\",\r\n            //vehicleLetter: route.params.vehicleLetter,\r\n            vehicleRegistration: \"\",\r\n            direction: \"\",\r\n            comingFrom: \"\",\r\n            goingTo: \"\",\r\n            damageDescription: \"\",\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={handleFormSubmit}\r\n        >\r\n          {({\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            values,\r\n            errors,\r\n            touched,\r\n            setFieldValue,\r\n          }) => (\r\n            <>\r\n              {/* Section pour capturer les images */}\r\n\r\n              {step === 1 && (\r\n                <>\r\n                  <Text style={styles.sectionTitle}>Capture des dégâts</Text>\r\n                  <View style={styles.cameraButtonsContainer}>\r\n                    {renderCameraButton(\"front\", frontImage)}\r\n                    {renderCameraButton(\"back\", backImage)}\r\n                    {renderCameraButton(\"left\", leftImage)}\r\n                    {renderCameraButton(\"right\", rightImage)}\r\n                  </View>\r\n\r\n                  {/* Section 1 : Identité du Véhicule */}\r\n\r\n                  <Text style={styles.sectionTitle}>Identité du Véhicule</Text>\r\n\r\n                  <Text style={styles.label}>N°Matricule</Text>\r\n\r\n                  <TouchableOpacity style={styles.touchableInput}>\r\n                    <MaterialCommunityIcons\r\n                      name=\"car\"\r\n                      size={25}\r\n                      color=\"black\"\r\n                    />\r\n                    <CustomPicker\r\n                      selectedValue={secondPart}\r\n                      onValueChange={(itemValue) => {\r\n                        setSecondPart(itemValue);\r\n\r\n                        // Trouver l'objet véhicule correspondant\r\n                        const selectedVehicle = user?.vehicules.find(\r\n                          (vehicule) => vehicule.numeroMatricule === itemValue\r\n                        );\r\n\r\n                        setFieldValue(\"vehicleBrand\", selectedVehicle?.brand);\r\n                        setFieldValue(\"vehicleType\", selectedVehicle?.type);\r\n\r\n                        setFirstPart(selectedVehicle?.numeroSerie);\r\n\r\n                        setFieldValue(\r\n                          \"vehicleRegistration\",\r\n                          `${selectedVehicle?.numeroSerie} ${selectedVehicle?.type} ${itemValue}`\r\n                        );\r\n\r\n                        setFieldValue(\r\n                          \"validFrom\",\r\n                          new Date(\r\n                            selectedVehicle?.insuranceStartDate\r\n                          ).toLocaleDateString()\r\n                        );\r\n                        setFieldValue(\r\n                          \"validTo\",\r\n                          new Date(\r\n                            selectedVehicle?.insuranceEndDate\r\n                          ).toLocaleDateString()\r\n                        );\r\n\r\n                        setFieldValue(\r\n                          \"insuredVehicle\",\r\n                          selectedVehicle?.assure\r\n                        );\r\n                        setFieldValue(\r\n                          \"contractNumber\",\r\n                          selectedVehicle?.numeroContrat\r\n                        );\r\n\r\n                        setFieldValue(\"agency\", selectedVehicle?.agence);\r\n                      }}\r\n                      items={[\r\n                        { label: \"Sélectionnez Matricule\", value: \"\" },\r\n                        ...user?.vehicules.map((numeroMatricule) => ({\r\n                          label: numeroMatricule?.numeroMatricule,\r\n                          value: numeroMatricule?.numeroMatricule,\r\n                        })),\r\n                      ]}\r\n                      placeholder=\"Sélectionnez Matricule\"\r\n                    />\r\n                  </TouchableOpacity>\r\n\r\n                  <AppFormField\r\n                    autoCorrect={false}\r\n                    icon=\"car\"\r\n                    name=\"vehicleBrand\"\r\n                    value={values.vehicleBrand}\r\n                    placeholder=\"Brand\"\r\n                    editable={false}\r\n                  />\r\n\r\n                  <AppFormField\r\n                    editable={false}\r\n                    autoCorrect={false}\r\n                    icon=\"car\"\r\n                    placeholder=\"Type \"\r\n                    value={values.vehicleType}\r\n                  />\r\n\r\n                  <Text style={styles.label}>N° d'immatriculation</Text>\r\n                  <View style={styles.registrationContainer}>\r\n                    <AppTextInput\r\n                      width=\"35%\"\r\n                      icon=\"car\"\r\n                      placeholder=\"N° serie\"\r\n                      value={firstPart}\r\n                      editable={false}\r\n                      keyboardType=\"numeric\"\r\n                    />\r\n\r\n                    {/* <TextInput\r\n                      style={[styles.input, styles.registrationInput]}\r\n                      placeholder=\"N° serie\"\r\n                      value={firstPart}\r\n                      editable={false}\r\n                      keyboardType=\"numeric\"\r\n                    /> */}\r\n\r\n                    <Text style={styles.registrationText}>\r\n                      {values?.vehicleType || \"Type\"}\r\n                    </Text>\r\n\r\n                    <AppTextInput\r\n                      width=\"35%\"\r\n                      icon=\"car\"\r\n                      placeholder=\"N° Matricule\"\r\n                      value={secondPart}\r\n                      editable={false}\r\n                      keyboardType=\"numeric\"\r\n                    />\r\n                    {/* <TextInput\r\n                      style={[styles.input, styles.registrationInput]}\r\n                      placeholder=\"N° Matricule \"\r\n                      value={secondPart}\r\n                      editable={false}\r\n                      keyboardType=\"numeric\"\r\n                    /> */}\r\n                  </View>\r\n\r\n                  <Text style={styles.label}>Choisissez la face du choc :</Text>\r\n                  <TouchableOpacity style={styles.touchableInput}>\r\n                    <MaterialCommunityIcons\r\n                      name=\"car\"\r\n                      size={25}\r\n                      color=\"black\"\r\n                    />\r\n                    <CustomPicker\r\n                      selectedValue={selectedFace}\r\n                      onValueChange={(itemValue) => {\r\n                        setSelectedFace(itemValue);\r\n                        setFieldValue(\"face\", itemValue);\r\n                      }}\r\n                      items={[\r\n                        { label: \"Sélectionnez une face\", value: \"\" },\r\n                        ...vehicleFaces.map((face) => ({\r\n                          label: face.charAt(0).toUpperCase() + face.slice(1), // capitalise\r\n                          value: face,\r\n                        })),\r\n                      ]}\r\n                      placeholder=\"Sélectionnez une face\"\r\n                    />\r\n                  </TouchableOpacity>\r\n                  {/* Section 2 : Société d'Assurances */}\r\n                  <Text style={styles.sectionTitle}>Société d'Assurances</Text>\r\n                  <Text style={styles.label}>Véhicule assuré par</Text>\r\n\r\n                  <AppFormField\r\n                    autoCorrect={false}\r\n                    icon=\"home\"\r\n                    placeholder=\"assuré par \"\r\n                    name=\"insuredVehicle\"\r\n                    value={values?.insuredVehicle}\r\n                    editable={false}\r\n                  />\r\n\r\n                  <Text style={styles.label}>Contrat d'Assurance N°</Text>\r\n\r\n                  <AppFormField\r\n                    autoCorrect={false}\r\n                    icon=\"file-document\"\r\n                    placeholder=\"Contrat d'Assurance N°\"\r\n                    value={values?.contractNumber}\r\n                    name=\"contractNumber\"\r\n                    editable={false}\r\n                  />\r\n\r\n                  <Text style={styles.label}>Agence</Text>\r\n                  <AppFormField\r\n                    autoCorrect={false}\r\n                    icon=\"home\"\r\n                    placeholder=\"Agence\"\r\n                    name=\"agency\"\r\n                    value={values?.agency}\r\n                    editable={false}\r\n                  />\r\n\r\n                  {/* pour assurance */}\r\n\r\n                  <Text style={styles.label}>Attestation valable</Text>\r\n                  <View style={styles.registrationContainer}>\r\n                    <AppFormField\r\n                      width=\"40%\"\r\n                      autoCorrect={false}\r\n                      icon=\"calendar\"\r\n                      placeholder=\"De \"\r\n                      name=\"validFrom\"\r\n                      value={values?.validFrom}\r\n                      editable={false}\r\n                    />\r\n\r\n                    <MaterialIcons\r\n                      name=\"arrow-forward\"\r\n                      size={24}\r\n                      color=\"#007BFF\"\r\n                    />\r\n\r\n                    <AppFormField\r\n                      width=\"40%\"\r\n                      autoCorrect={false}\r\n                      icon=\"calendar\"\r\n                      placeholder=\"À\"\r\n                      name=\"validTo\"\r\n                      value={values?.validTo}\r\n                      editable={false}\r\n                    />\r\n                  </View>\r\n\r\n                  <TouchableOpacity\r\n                    style={[\r\n                      styles.SuivantButton,\r\n                      { backgroundColor: step === 1 ? \"#de6442\" : \"#007bff\" },\r\n                    ]}\r\n                    onPress={() => SetStep(2)}\r\n                  >\r\n                    <Text style={styles.backButtonText}>Suivant</Text>\r\n                  </TouchableOpacity>\r\n                </>\r\n              )}\r\n\r\n              {/* Section 3 : Identité du Conducteur */}\r\n\r\n              {step === 2 && (\r\n                <>\r\n                  <Text style={styles.sectionTitle}>\r\n                    Identité du Conducteur\r\n                  </Text>\r\n                  <Text style={styles.label}>Nom</Text>\r\n                  <AppTextInput\r\n                    icon=\"account\"\r\n                    placeholder=\"Nom Conducteur\"\r\n                    onChangeText={handleChange(\"driverLastName\")}\r\n                    onBlur={handleBlur(\"driverLastName\")}\r\n                    value={values.driverLastName}\r\n                  />\r\n                  {touched.driverLastName && errors.driverLastName && (\r\n                    <Text style={styles.errorText}>\r\n                      {errors.driverLastName}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <AppTextInput\r\n                    icon=\"account\"\r\n                    placeholder=\"Prénom Conducteur\"\r\n                    onChangeText={handleChange(\"driverFirstName\")}\r\n                    onBlur={handleBlur(\"driverFirstName\")}\r\n                    value={values.driverFirstName}\r\n                  />\r\n                  {touched.driverFirstName && errors.driverFirstName && (\r\n                    <Text style={styles.errorText}>\r\n                      {errors.driverFirstName}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <Text style={styles.label}>Adresse</Text>\r\n                  <AppTextInput\r\n                    icon=\"email\"\r\n                    placeholder=\"email Conducteur\"\r\n                    onChangeText={handleChange(\"driverAddress\")}\r\n                    onBlur={handleBlur(\"driverAddress\")}\r\n                    value={values.driverAddress}\r\n                  />\r\n                  {touched.driverAddress && errors.driverAddress && (\r\n                    <Text style={styles.errorText}>{errors.driverAddress}</Text>\r\n                  )}\r\n\r\n                  <Text style={styles.label}>Permis de conduire N°</Text>\r\n                  <AppTextInput\r\n                    icon=\"card-account-details-star\"\r\n                    placeholder=\"Permis de conduire N°\"\r\n                    onChangeText={handleChange(\"driverLicenseNumber\")}\r\n                    onBlur={handleBlur(\"driverLicenseNumber\")}\r\n                    value={values.driverLicenseNumber}\r\n                    keyboardType=\"numeric\"\r\n                  />\r\n                  {touched.driverLicenseNumber &&\r\n                    errors.driverLicenseNumber && (\r\n                      <Text style={styles.errorText}>\r\n                        {errors.driverLicenseNumber}\r\n                      </Text>\r\n                    )}\r\n\r\n                  <Text style={styles.label}>Délivré le</Text>\r\n                  <TouchableOpacity style={styles.touchableInput}>\r\n                    <MaterialCommunityIcons\r\n                      name=\"calendar\"\r\n                      size={25}\r\n                      color=\"black\"\r\n                    />\r\n                    <DatePickerField\r\n                      value={values.licenseIssueDate}\r\n                      onChange={(date) =>\r\n                        setFieldValue(\"licenseIssueDate\", date)\r\n                      }\r\n                      error={errors.licenseIssueDate}\r\n                      touched={touched.licenseIssueDate}\r\n                      placeholder=\"Sélectionnez la date de délivrance\"\r\n                      style={styles.Délivré}\r\n                    />\r\n                  </TouchableOpacity>\r\n\r\n                  {/* Section 4 : Assuré */}\r\n                  <Text style={styles.sectionTitle}>Assuré</Text>\r\n                  <Text style={styles.label}>Nom</Text>\r\n                  <AppFormField\r\n                    icon=\"account\"\r\n                    placeholder=\"Nom\"\r\n                    name=\"insuredLastName\"\r\n                    value={values.insuredLastName}\r\n                    editable={false}\r\n                  />\r\n\r\n                  <Text style={styles.label}>Prénom</Text>\r\n                  <AppFormField\r\n                    icon=\"account\"\r\n                    placeholder=\"Nom\"\r\n                    name=\"insuredFirstName\"\r\n                    value={values.insuredFirstName}\r\n                    editable={false}\r\n                  />\r\n\r\n                  <Text style={styles.label}>Adresse</Text>\r\n                  <AppFormField\r\n                    icon=\"email\"\r\n                    placeholder=\"Adresse\"\r\n                    name=\"insuredAddress\"\r\n                    value={values.insuredAddress}\r\n                    editable={false}\r\n                  />\r\n\r\n                  <Text style={styles.label}>Téléphone</Text>\r\n\r\n                  <AppFormField\r\n                    icon=\"cellphone\"\r\n                    placeholder=\"telephone\"\r\n                    name=\"insuredPhone\"\r\n                    value={values.insuredPhone}\r\n                    editable={false}\r\n                  />\r\n\r\n                  <TouchableOpacity\r\n                    style={[\r\n                      styles.SuivantButton,\r\n                      { backgroundColor: step === 1 ? \"#de6442\" : \"#007bff\" },\r\n                    ]}\r\n                    onPress={() => SetStep(1)}\r\n                  >\r\n                    <Text style={styles.backButtonText}>Retour</Text>\r\n                  </TouchableOpacity>\r\n\r\n                  <TouchableOpacity\r\n                    style={[\r\n                      styles.SuivantButton,\r\n                      { backgroundColor: step === 2 ? \"#de6442\" : \"#007bff\" },\r\n                    ]}\r\n                    onPress={() => SetStep(3)}\r\n                  >\r\n                    <Text style={styles.backButtonText}>Suivant</Text>\r\n                  </TouchableOpacity>\r\n                </>\r\n              )}\r\n\r\n              {step === 3 && (\r\n                <>\r\n                  <Text style={styles.label}>Sens suivi</Text>\r\n                  <AppTextInput\r\n                    placeholder=\"Sens suivi\"\r\n                    onChangeText={handleChange(\"direction\")}\r\n                    onBlur={handleBlur(\"direction\")}\r\n                    value={values.direction}\r\n                  />\r\n                  {touched.direction && errors.direction && (\r\n                    <Text style={styles.errorText}>{errors.direction}</Text>\r\n                  )}\r\n\r\n                  <Text style={styles.label}>Venant de</Text>\r\n                  <AppTextInput\r\n                    placeholder=\"Venant de\"\r\n                    onChangeText={handleChange(\"comingFrom\")}\r\n                    onBlur={handleBlur(\"comingFrom\")}\r\n                    value={values.comingFrom}\r\n                  />\r\n                  {touched.comingFrom && errors.comingFrom && (\r\n                    <Text style={styles.errorText}>{errors.comingFrom}</Text>\r\n                  )}\r\n\r\n                  <Text style={styles.label}>Allant à</Text>\r\n                  <AppTextInput\r\n                    placeholder=\"Allant à\"\r\n                    onChangeText={handleChange(\"goingTo\")}\r\n                    onBlur={handleBlur(\"goingTo\")}\r\n                    value={values.goingTo}\r\n                  />\r\n                  {touched.goingTo && errors.goingTo && (\r\n                    <Text style={styles.errorText}>{errors.goingTo}</Text>\r\n                  )}\r\n\r\n                  <Text style={styles.sectionTitle}>Dégâts apparents</Text>\r\n\r\n                  {/* Section 5 pour l'enregistrement vocal */}\r\n                  <Text style={styles.sectionTitle}>Vocal</Text>\r\n                  <VoiceRecording\r\n                    onRecordingsChange={(recordings) => {\r\n                      console.log(\"VoiceRecordings mis à jour :\", recordings);\r\n                      setVoiceRecordings(recordings);\r\n                    }}\r\n                  />\r\n\r\n                  <Text style={styles.sectionTitle}>Ecrite</Text>\r\n                  <TextInput\r\n                    style={[\r\n                      styles.input,\r\n                      { height: 100, textAlignVertical: \"top\" },\r\n                    ]}\r\n                    placeholder=\"Décrivez les dégâts apparents\"\r\n                    onChangeText={handleChange(\"damageDescription\")}\r\n                    onBlur={handleBlur(\"damageDescription\")}\r\n                    value={values.damageDescription}\r\n                    multiline\r\n                  />\r\n                  {touched.damageDescription && errors.damageDescription && (\r\n                    <Text style={styles.errorText}>\r\n                      {errors.damageDescription}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <TouchableOpacity\r\n                    style={[\r\n                      styles.SuivantButton,\r\n                      { backgroundColor: step === 1 ? \"#de6442\" : \"#007bff\" },\r\n                    ]}\r\n                    onPress={() => SetStep(2)}\r\n                  >\r\n                    <Text style={styles.backButtonText}>Retour</Text>\r\n                  </TouchableOpacity>\r\n\r\n                  <TouchableOpacity\r\n                    style={[\r\n                      styles.SuivantButton,\r\n                      { backgroundColor: step === 3 ? \"#de6442\" : \"#007bff\" },\r\n                    ]}\r\n                    onPress={() => SetStep(4)}\r\n                  >\r\n                    <Text style={styles.backButtonText}>Suivant</Text>\r\n                  </TouchableOpacity>\r\n                </>\r\n              )}\r\n\r\n              {step === 4 && (\r\n                <>\r\n                  {/* Section 6 : Circonstances */}\r\n                  <Text style={styles.sectionTitle}>Circonstances</Text>\r\n                  {Object.keys(circumstances).map((key) => (\r\n                    <View key={key} style={styles.checkboxContainer}>\r\n                      <View style={styles.checkboxWrapper}>\r\n                        <Checkbox\r\n                          status={circumstances[key] ? \"checked\" : \"unchecked\"}\r\n                          onPress={() => handleCheckboxChange(key)}\r\n                          color=\"#007BFF\"\r\n                        />\r\n                      </View>\r\n                      <Text style={styles.checkboxLabel}>\r\n                        {key\r\n                          .replace(/([A-Z])/g, \" $1\")\r\n                          .replace(/^./, (str) => str.toUpperCase())}\r\n                      </Text>\r\n                    </View>\r\n                  ))}\r\n\r\n                  {/* Indiquer le nombre de cases cochées */}\r\n                  <Text style={styles.sectionTitle}>\r\n                    Nombre de cases cochées : {countCheckedBoxes()}\r\n                  </Text>\r\n\r\n                  <TouchableOpacity\r\n                    style={[\r\n                      styles.SuivantButton,\r\n                      { backgroundColor: step === 1 ? \"#de6442\" : \"#007bff\" },\r\n                    ]}\r\n                    onPress={() => SetStep(3)}\r\n                  >\r\n                    <Text style={styles.backButtonText}>Retour</Text>\r\n                  </TouchableOpacity>\r\n\r\n                  {/* Bouton Valider */}\r\n\r\n                  <TouchableOpacity\r\n                    style={[\r\n                      styles.SuivantButton,\r\n                      { backgroundColor: \"#de6442\" },\r\n                    ]}\r\n                    onPress={handleSubmit}\r\n                  >\r\n                    <Text style={styles.backButtonText}>Valider</Text>\r\n                  </TouchableOpacity>\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  scrollViewContent: {\r\n    padding: 16,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    marginTop: 16,\r\n    marginBottom: 8,\r\n  },\r\n  label: {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 8,\r\n  },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    borderRadius: 4,\r\n    padding: 8,\r\n    marginBottom: 16,\r\n  },\r\n  cameraButtonsContainer: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 16,\r\n  },\r\n  cameraButton: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: \"23%\",\r\n    height: 100,\r\n    padding: 10,\r\n    borderWidth: 1,\r\n    borderColor: \"#007BFF\",\r\n    borderRadius: 4,\r\n  },\r\n  touchableInput: {\r\n    width: \"100%\",\r\n    flex: 1,\r\n    backgroundColor: \"#f8f4f4\",\r\n    borderRadius: 25,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    gap: \"10%\",\r\n    padding: 8,\r\n    marginVertical: 5,\r\n    height: 50,\r\n  },\r\n  inputContainer: {\r\n    backgroundColor: \"#f8f4f4\",\r\n    borderRadius: 25,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    padding: 8,\r\n    marginVertical: 5,\r\n    height: 50,\r\n  },\r\n  cameraButtonText: {\r\n    color: \"#007BFF\",\r\n    fontSize: 14,\r\n    marginTop: 8,\r\n  },\r\n  imageContainer: {\r\n    position: \"relative\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  image: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    borderRadius: 4,\r\n  },\r\n  removeIcon: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    backgroundColor: \"white\",\r\n    borderRadius: 12,\r\n    padding: 4,\r\n  },\r\n  checkboxContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    marginBottom: 8,\r\n  },\r\n  checkboxWrapper: {\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    borderRadius: 4,\r\n    padding: 4,\r\n  },\r\n  checkboxLabel: {\r\n    flex: 1,\r\n    marginLeft: 8,\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n    fontSize: 12,\r\n    marginBottom: 8,\r\n  },\r\n  pickerContainer: {\r\n    marginBottom: 16,\r\n  },\r\n  picker: {\r\n    height: 50,\r\n    width: \"100%\",\r\n    color: \"#333\",\r\n  },\r\n  registrationContainer: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    marginBottom: 16,\r\n    justifyContent: \"space-around\",\r\n  },\r\n  registrationInput: {\r\n    flex: 1,\r\n    marginHorizontal: 4,\r\n  },\r\n  registrationText: {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n  },\r\n  Délivré: {\r\n    color: \"#333\",\r\n  },\r\n\r\n  SuivantButton: {\r\n    borderRadius: 25,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: 15,\r\n    width: \"100%\",\r\n    marginVertical: 10,\r\n  },\r\n\r\n  backButtonText: {\r\n    color: \"#fff\",\r\n    fontSize: 18,\r\n    textTransform: \"uppercase\",\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nexport default VehiculeA;\r\n"
        }
    ]
}