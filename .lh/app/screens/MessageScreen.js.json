{
    "sourceFile": "app/screens/MessageScreen.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749682078537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749682078537,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  FlatList,\r\n  StyleSheet,\r\n  KeyboardAvoidingView,\r\n  Platform,\r\n} from \"react-native\";\r\nimport { io } from \"socket.io-client\";\r\nimport { Audio } from \"expo-av\";\r\nimport { useRoute, useNavigation } from \"@react-navigation/native\";\r\nimport authStorage from \"../../app/auth/storage\";\r\nimport client from \"../api/client\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\nconst SOCKET_URL = \"http://192.168.1.13:9000\";\r\n\r\nfunction MessageScreen() {\r\n  const route = useRoute();\r\n  const navigation = useNavigation();\r\n  const { reciverId, recivedName, role } = route.params;\r\n\r\n  const [user, setUser] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [filteredMessages, setFilteredMessages] = useState([]);\r\n  const [messageInput, setMessageInput] = useState(\"\");\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  const flatListRef = useRef(null);\r\n  const socketRef = useRef(null);\r\n\r\n  const userModel = \"User\";\r\n  const receiverModel = \"Admin\";\r\n\r\n  const playNotificationSound = async () => {\r\n    try {\r\n      const { sound } = await Audio.Sound.createAsync(\r\n        require(\"../assets/notification.mp3\")\r\n      );\r\n      await sound.playAsync();\r\n    } catch (error) {\r\n      console.error(\"Erreur de lecture du son:\", error);\r\n    }\r\n  };\r\n\r\n  const restoreUser = async () => {\r\n    try {\r\n      const user = await authStorage.getUser();\r\n      if (user) setUser(user);\r\n    } catch (error) {\r\n      console.error(\"Error restoring user:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    restoreUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const socket = io(SOCKET_URL, {\r\n      query: {\r\n        userId: user.userId,\r\n        userModel: \"User\",\r\n      },\r\n      transports: [\"websocket\"],\r\n    });\r\n\r\n    socketRef.current = socket;\r\n\r\n    socket.on(\"connection\", () => {\r\n      console.log(\"Socket connecté\", socket.id);\r\n    });\r\n\r\n    socket.on(\"newMessage\", (newMsg) => {\r\n      playNotificationSound();\r\n      setMessages((prev) => [...prev, newMsg]);\r\n      setFilteredMessages((prev) => [...prev, newMsg]);\r\n    });\r\n\r\n    socket.on(\"connect_error\", (err) => {\r\n      console.error(\"Erreur de connexion au socket :\", err.message);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [user]);\r\n\r\n  const getMesMessage = async () => {\r\n    const token = await authStorage.getToken();\r\n\r\n    try {\r\n      const response = await client.post(\r\n        \"/message/message/conversations\",\r\n        { receiverId: reciverId },\r\n        {\r\n          headers: {\r\n            \"x-auth-token\": token,\r\n          },\r\n        }\r\n      );\r\n\r\n      const data = response?.data?.messages || [];\r\n      setMessages(data);\r\n      setFilteredMessages(data);\r\n\r\n      // Scroll vers le bas\r\n      setTimeout(() => {\r\n        flatListRef.current?.scrollToEnd({ animated: true });\r\n      }, 100);\r\n    } catch (error) {\r\n      console.error(\"Erreur API non bloquante:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      getMesMessage();\r\n    }\r\n  }, [user, reciverId]);\r\n\r\n  const handleSend = async () => {\r\n    const token = await authStorage.getToken();\r\n    if (!messageInput.trim()) return;\r\n\r\n    const payload = {\r\n      message: messageInput,\r\n      receiverModel,\r\n    };\r\n\r\n    const response = await client.post(\r\n      \"/message/send/\" + reciverId,\r\n      JSON.stringify(payload),\r\n      {\r\n        headers: {\r\n          \"x-auth-token\": token,\r\n        },\r\n      }\r\n    );\r\n\r\n    if (response?.status === 201) {\r\n      getMesMessage();\r\n      setMessageInput(\"\");\r\n      socketRef.current.emit(\"newMessage\", messageInput);\r\n    }\r\n  };\r\n\r\n  const handleSearch = (text) => {\r\n    setSearchText(text);\r\n    const filtered = messages.filter((msg) =>\r\n      msg.message.toLowerCase().includes(text.toLowerCase())\r\n    );\r\n    setFilteredMessages(filtered);\r\n  };\r\n\r\n  const renderMessage = ({ item }) => {\r\n    const isCurrentUser = item.senderModel === userModel;\r\n\r\n    return (\r\n      <View\r\n        style={[\r\n          styles.messageContainer,\r\n          isCurrentUser ? styles.messageRight : styles.messageLeft,\r\n        ]}\r\n      >\r\n        <Text style={styles.messageText}>{item.message}</Text>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <KeyboardAvoidingView\r\n        behavior={Platform.OS === \"ios\" ? \"padding\" : null}\r\n        style={styles.container}\r\n      >\r\n        <View style={styles.header}>\r\n          <TouchableOpacity onPress={() => navigation.goBack()}>\r\n            <FontAwesome name=\"arrow-left\" size={24} color=\"#007AFF\" />\r\n          </TouchableOpacity>\r\n          <View style={styles.textContainer}>\r\n            <View style={styles.avatar}>\r\n              <FontAwesome name=\"user\" size={30} color=\"#333\" />\r\n            </View>\r\n            <View style={styles.txt}>\r\n              <Text style={styles.headerTitle}>{recivedName}</Text>\r\n              <Text style={styles.role}>{role}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n        {/* Zone de recherche */}\r\n        <View style={styles.searchContainer}>\r\n          <TextInput\r\n            placeholder=\"Rechercher un message...\"\r\n            value={searchText}\r\n            onChangeText={handleSearch}\r\n            style={styles.searchInput}\r\n          />\r\n        </View>\r\n\r\n        {/* Liste des messages */}\r\n        <FlatList\r\n          ref={flatListRef}\r\n          data={filteredMessages}\r\n          renderItem={renderMessage}\r\n          keyExtractor={(item) => item._id}\r\n          contentContainerStyle={{ padding: 10 }}\r\n          onContentSizeChange={() =>\r\n            flatListRef.current?.scrollToEnd({ animated: true })\r\n          }\r\n        />\r\n\r\n        {/* Zone d'envoi */}\r\n        <View style={styles.inputContainer}>\r\n          <TextInput\r\n            placeholder=\"Écrire un message...\"\r\n            style={styles.input}\r\n            value={messageInput}\r\n            onChangeText={setMessageInput}\r\n          />\r\n          <TouchableOpacity onPress={handleSend} style={styles.sendButton}>\r\n            <Text style={styles.sendButtonText}>Envoyer</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </KeyboardAvoidingView>\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  header: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    padding: 10,\r\n    backgroundColor: \"#f9f9f9\",\r\n    borderBottomWidth: 1,\r\n    borderColor: \"#ccc\",\r\n  },\r\n  headerTitle: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    marginLeft: 10,\r\n    color: \"#333\",\r\n  },\r\n  role: {\r\n    fontSize: 14,\r\n    color: \"gray\",\r\n\r\n    fontWeight: \"bold\",\r\n    marginLeft: 10,\r\n  },\r\n  avatar: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: 40,\r\n    backgroundColor: \"#eee\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginRight: 12,\r\n  },\r\n\r\n  textContainer: {\r\n    flex: 1,\r\n    marginLeft: 20,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  txt: {\r\n    flexDirection: \"col\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  searchContainer: {\r\n    padding: 10,\r\n    borderBottomWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    backgroundColor: \"#f9f9f9\",\r\n  },\r\n  searchInput: {\r\n    backgroundColor: \"#fff\",\r\n    padding: 10,\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: \"#ddd\",\r\n  },\r\n  messageContainer: {\r\n    maxWidth: \"75%\",\r\n    padding: 10,\r\n    borderRadius: 15,\r\n    marginVertical: 5,\r\n  },\r\n  messageLeft: {\r\n    backgroundColor: \"#222\",\r\n    alignSelf: \"flex-start\",\r\n  },\r\n  messageRight: {\r\n    backgroundColor: \"#007AFF\",\r\n    alignSelf: \"flex-end\",\r\n  },\r\n  messageText: {\r\n    color: \"#fff\",\r\n    fontSize: 16,\r\n  },\r\n  inputContainer: {\r\n    flexDirection: \"row\",\r\n    padding: 10,\r\n    borderTopWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    backgroundColor: \"#f9f9f9\",\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    height: 45,\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 25,\r\n    paddingHorizontal: 15,\r\n    borderWidth: 1,\r\n    borderColor: \"#ddd\",\r\n  },\r\n  sendButton: {\r\n    marginLeft: 10,\r\n    backgroundColor: \"#007AFF\",\r\n    borderRadius: 25,\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 20,\r\n    justifyContent: \"center\",\r\n  },\r\n  sendButtonText: {\r\n    color: \"#fff\",\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nexport default MessageScreen;\r\n"
        }
    ]
}